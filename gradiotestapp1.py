# -*- coding: utf-8 -*-
"""GradioTestApp1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p_Av_QQbatXVTA8kE3xK3hiZ08CL0UK3
"""

# !pip install -q gradio

!pip install -q gradio
!pip install -q transformers
!pip install -q sentencepiece
!pip install -q bert-extractive-summarizer

# !pip install -q transformers

# !pip install -q sentencepiece

# !pip install -q bert-extractive-summarizer

import gradio as gr
import transformers
import sentencepiece
from summarizer import Summarizer

bert_model=Summarizer()

from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

# model = AutoModelForSeq2SeqLM.from_pretrained("microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract")
model = AutoModelForSeq2SeqLM.from_pretrained("google/pegasus-pubmed")
tokenizer = AutoTokenizer.from_pretrained("google/pegasus-pubmed")



# from transformers import pipeline

# summarizer = pipeline("summarization")



pegasus_large_covid_tokenizer = AutoTokenizer.from_pretrained("mayu0007/pegasus_large_covid")

pegasus_large_covid_model = AutoModelForSeq2SeqLM.from_pretrained("mayu0007/pegasus_large_covid")

from transformers import   AutoModel
Bio_ClinicalBERT_tokenizer = AutoTokenizer.from_pretrained("emilyalsentzer/Bio_ClinicalBERT")
Bio_ClinicalBERT_model = AutoModel.from_pretrained("emilyalsentzer/Bio_ClinicalBERT")

def SummarizeText(inp):  
   
    summary_generated = bert_model(inp)
#     print(summary_generated)
    
    inputs = tokenizer.encode("summarize: " + inp, return_tensors="pt", max_length=1024, truncation=True)
    outputs = model.generate(
        inputs, 
        max_length=128, 
        min_length=10, 
        length_penalty=2.0, 
        num_beams=4, 
        early_stopping=True)
    
    inputs_pegasus_large_covid = pegasus_large_covid_tokenizer.encode("summarize: " + inp, return_tensors="pt", max_length=1024, truncation=True)
    outputs_pegasus_large_covid = pegasus_large_covid_model.generate(
        inputs_pegasus_large_covid, 
        max_length=150, 
        min_length=50, 
        length_penalty=2.0, 
        num_beams=4, 
        early_stopping=True)
    
    # inputs_Bio_ClinicalBERT = Bio_ClinicalBERT_tokenizer.encode("summarize: " + inp, return_tensors="pt", max_length=1024, truncation=True)
    # outputs_Bio_ClinicalBERT = Bio_ClinicalBERT_model.generate(
    #     inputs_Bio_ClinicalBERT, 
    #     max_length=100, 
    #     min_length=10, 
    #     length_penalty=2.0, 
    #     num_beams=4, 
    #     early_stopping=True)
    
    summary_generated_pegasus_pubmed = tokenizer.decode(outputs[0])
    summary_pegasus_large_covid = pegasus_large_covid_tokenizer.decode(outputs_pegasus_large_covid[0])
    # summary_Bio_ClinicalBERT = Bio_ClinicalBERT_tokenizer.decode(outputs_Bio_ClinicalBERT[0])

    return summary_generated , summary_generated_pegasus_pubmed,summary_pegasus_large_covid,"summary_Bio_ClinicalBERT"

a ='''
The new coronavirus severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2) uses an RNA-dependent RNA polymerase (RdRp) for the replication of its genome and the transcription of its genes1-3. Here we present a cryo-electron microscopy structure of the SARS-CoV-2 RdRp in an active form that mimics the replicating enzyme. The structure comprises the viral proteins non-structural protein 12 (nsp12), nsp8 and nsp7, and more than two turns of RNA template-product duplex. The active-site cleft of nsp12 binds to the first turn of RNA and mediates RdRp activity with conserved residues. Two copies of nsp8 bind to opposite sides of the cleft and position the second turn of RNA. Long helical extensions in nsp8 protrude along exiting RNA, forming positively charged 'sliding poles'. These sliding poles can account for the known processivity of RdRp that is required for replicating the long genome of coronaviruses3. Our results enable a detailed analysis of the inhibitory mechanisms that underlie the antiviral activity of substances such as remdesivir, a drug for the treatment of coronavirus disease 2019 (COVID-19)4.
'''
SummarizeText(a)

# , gr.outputs.Textbox(label=" Summary-4 (emilyalsentzer/Bio_ClinicalBERT)")
iface = gr.Interface(
  fn=SummarizeText, 
  inputs=[gr.inputs.Textbox(label="Abstract (*Enter paragraphs)",lines=10, placeholder="Enter abstract text here...") ],
    
  outputs=[
           gr.outputs.Textbox(label=" Summary-1  (Bert)") ,
           gr.outputs.Textbox(label=" Summary-2 (google/pegasus-pubmed) ") ,
           gr.outputs.Textbox(label=" Summary-3 (mayu0007/pegasus_large_covid) ")],title= "Auto summarization and Summary comparision(beta)"  )
iface.launch(share=True)

